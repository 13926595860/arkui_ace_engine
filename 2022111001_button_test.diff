diff --git a/frameworks/core/components_ng/test/layout/BUILD.gn b/frameworks/core/components_ng/test/layout/BUILD.gn
index 4bc98ddca..d28238191 100644
--- a/frameworks/core/components_ng/test/layout/BUILD.gn
+++ b/frameworks/core/components_ng/test/layout/BUILD.gn
@@ -14,6 +14,7 @@
 group("layout_unittest") {
   testonly = true
   deps = [
+    "button:button_layout_test_ng",
     "flex:flex_layout_test_ng",
     "relative_container:relative_container_layout_test_ng",
   ]
diff --git a/frameworks/core/components_ng/test/layout/button/BUILD.gn b/frameworks/core/components_ng/test/layout/button/BUILD.gn
new file mode 100644
index 000000000..df63de707
--- /dev/null
+++ b/frameworks/core/components_ng/test/layout/button/BUILD.gn
@@ -0,0 +1,80 @@
+# Copyright (c) 2022 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/test.gni")
+import("//foundation/arkui/ace_engine/ace_config.gni")
+import(
+    "//foundation/arkui/ace_engine/frameworks/core/components_ng/components.gni")
+
+ohos_unittest("button_layout_test_ng") {
+  module_out_path = "$test_output_path/button"
+  platform = "ohos"
+
+  sources = [ "button_layout_test_ng.cpp" ]
+
+  deps = [
+    "$ace_root/build:ace_ohos_unittest_base",
+    "$ace_root/frameworks/base:ace_base_ohos",
+    "$ace_root/frameworks/core/components/test:json",
+    "$ace_root/frameworks/core/components_ng/base:ace_core_components_base_ng_ohos",
+    "$ace_root/frameworks/core/components_ng/event:ace_core_components_event_ng_ohos",
+    "$ace_root/frameworks/core/components_ng/layout:ace_core_components_layout_ng_ohos",
+    "$ace_root/frameworks/core/components_ng/pattern:ace_core_components_pattern_ng_ohos",
+    "$ace_root/frameworks/core/components_ng/property:ace_core_components_property_ng_ohos",
+    "$ace_root/frameworks/core/components_ng/render:ace_core_components_render_ng_ohos",
+    "$ace_root/frameworks/core/components_ng/syntax:ace_core_components_syntax_ng_ohos",
+  ]
+
+  if (enable_ng_build) {
+    deps += [
+      "$ace_flutter_engine_root_new:third_party_flutter_engine_dev_ohos",
+      "$ace_flutter_engine_root_new/third_party/skia:ace_skia_dev_ohos",
+    ]
+  } else {
+    deps += [
+      "$ace_flutter_engine_root:third_party_flutter_engine_ohos",
+      "$ace_flutter_engine_root/skia:ace_skia_ohos",
+    ]
+  }
+
+  configs = [
+    ":config_button_test",
+    "$ace_root:ace_test_config",
+  ]
+
+  include_dirs = [
+    "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
+    "//foundation/graphic/graphic_2d/rosen/modules/2d_engine",
+    "//foundation/graphic/graphic_2d/rosen/modules/2d_engine/rosen_text",
+    "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics/include",
+    "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics/src",
+    "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics/src/drawing/engine_adapter",
+    "//third_party/bounds_checking_function/include",
+  ]
+
+  if (platform == "ohos") {
+    deps += [
+      "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics:2d_graphics",
+    ]
+  } else {
+    deps += [ "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics:2d_graphics_source_$platform" ]
+  }
+}
+
+config("config_button_test") {
+  visibility = [ ":*" ]
+  include_dirs = [
+    "//commonlibrary/c_utils/base/include",
+    "$ace_root",
+  ]
+}
diff --git a/frameworks/core/components_ng/test/layout/button/button_layout_test_ng.cpp b/frameworks/core/components_ng/test/layout/button/button_layout_test_ng.cpp
new file mode 100644
index 000000000..2795c2744
--- /dev/null
+++ b/frameworks/core/components_ng/test/layout/button/button_layout_test_ng.cpp
@@ -0,0 +1,191 @@
+/*
+ * Copyright (c) 2022 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <optional>
+
+#include "gtest/gtest.h"
+
+#include "base/geometry/dimension.h"
+#include "base/geometry/ng/offset_t.h"
+#include "base/geometry/ng/size_t.h"
+#include "base/memory/ace_type.h"
+#include "base/memory/referenced.h"
+#include "core/components_ng/base/view_stack_processor.h"
+#include "core/components_ng/layout/layout_wrapper.h"
+#include "core/components_ng/pattern/button/button_pattern.h"
+#include "core/components_ng/pattern/button/button_layout_algorithm.h"
+#include "core/components_ng/pattern/button/button_layout_property.h"
+#include "core/components_ng/pattern/button/button_pattern.h"
+#include "core/components_ng/pattern/button/button_view.h"
+#include "core/components_ng/pattern/text/text_layout_property.h"
+#include "core/components_ng/pattern/text/text_pattern.h"
+
+using namespace testing;
+using namespace testing::ext;
+
+namespace OHOS::Ace::NG {
+
+const float BUTTON_WIDTH = 150.0f;
+const float BUTTON_HEIGHT = 75.0f;
+const float BUTTON_ONLY_HAS_WIDTH_VALUE = 500.0f;
+const float TEXT_WIDTH = 200.0f;
+const float TEXT_HEIGHT = 100.0f;
+const char TEXT_ETS_TAG[] = "Text";
+const char CREATE_VALUE[] = "Hello World";
+const SizeF BUTTON_SIZE(BUTTON_WIDTH, BUTTON_HEIGHT);
+const SizeF TEXT_SIZE(TEXT_WIDTH, TEXT_HEIGHT);
+const SizeF BUTTON_ONLY_HAS_WIDTH_SIZE(BUTTON_ONLY_HAS_WIDTH_VALUE, BUTTON_ONLY_HAS_WIDTH_VALUE);
+
+namespace {
+
+} // namespace
+
+class ButtonLayoutTestNg : public testing::Test {
+public:
+    static void SetUpTestCase() {};
+    static void TearDownTestCase() {};
+};
+
+/**
+ * @tc.name: ButtonLayoutTest001
+ * @tc.desc: Set an item with alignrules with Button and check it.
+ * @tc.type: FUNC
+ */
+HWTEST_F(ButtonLayoutTestNg, ButtonLayoutTest001, TestSize.Level1)
+{
+    ButtonView::CreateWithLabel(CREATE_VALUE);
+    RefPtr<UINode> element = ViewStackProcessor::GetInstance()->Finish(); 
+    auto frameNode = AceType::DynamicCast<FrameNode>(element);
+    EXPECT_FALSE(frameNode == nullptr);
+    auto textNode = FrameNode::CreateFrameNode(
+            TEXT_ETS_TAG, ElementRegister::GetInstance()->MakeUniqueId(), AceType::MakeRefPtr<TextPattern>());
+    EXPECT_FALSE(textNode == nullptr);
+    auto textLayoutProperty = textNode->GetLayoutProperty<TextLayoutProperty>();
+    EXPECT_FALSE(textLayoutProperty == nullptr);
+    textLayoutProperty->UpdateContent(CREATE_VALUE);
+    textNode->SetInternal();
+    frameNode->AddChild(textNode);
+    RefPtr<GeometryNode> geometryNode = AceType::MakeRefPtr<GeometryNode>();
+    EXPECT_FALSE(geometryNode == nullptr);
+    LayoutWrapper layoutWrapper = LayoutWrapper(frameNode, geometryNode, frameNode->GetLayoutProperty());
+    auto buttonPattern = frameNode->GetPattern<ButtonPattern>();
+    EXPECT_FALSE(buttonPattern == nullptr);
+    auto buttonLayoutProperty = layoutWrapper.GetLayoutProperty();
+    EXPECT_FALSE(buttonLayoutProperty == nullptr);
+    auto buttonLayoutAlgorithm = buttonPattern->CreateLayoutAlgorithm();
+    EXPECT_FALSE(buttonLayoutAlgorithm == nullptr);
+    layoutWrapper.SetLayoutAlgorithm(
+        AccessibilityManager::MakeRefPtr<LayoutAlgorithmWrapper>(buttonLayoutAlgorithm));
+    LayoutConstraintF parentLayoutConstraint;
+    parentLayoutConstraint.selfIdealSize.SetSize(BUTTON_SIZE);
+    layoutWrapper.GetLayoutProperty()->UpdateLayoutConstraint(parentLayoutConstraint);
+    layoutWrapper.GetLayoutProperty()->UpdateContentConstraint();
+
+    auto childLayoutConstraint = layoutWrapper.GetLayoutProperty()->CreateChildConstraint();
+    childLayoutConstraint.maxSize = BUTTON_SIZE;
+    childLayoutConstraint.minSize = SizeF(0.0f, 0.0f);
+
+    buttonLayoutAlgorithm->Measure(&layoutWrapper);
+    buttonLayoutAlgorithm->Layout(&layoutWrapper);
+
+    EXPECT_EQ(
+        layoutWrapper.GetGeometryNode()->GetFrameSize(), BUTTON_SIZE);
+    EXPECT_EQ(layoutWrapper.GetGeometryNode()->GetFrameOffset(), OffsetF());
+}
+
+/**
+ * @tc.name: ButtonLayoutTest002
+ * @tc.desc: Set an item with alignrules with Button and check it.
+ * @tc.type: FUNC
+ */
+HWTEST_F(ButtonLayoutTestNg, ButtonLayoutTest002, TestSize.Level1)
+{
+    ButtonView::CreateWithLabel(CREATE_VALUE);
+    RefPtr<UINode> element = ViewStackProcessor::GetInstance()->Finish(); 
+    auto frameNode = AceType::DynamicCast<FrameNode>(element);
+    EXPECT_FALSE(frameNode == nullptr);
+    auto textNode = FrameNode::CreateFrameNode(
+            TEXT_ETS_TAG, ElementRegister::GetInstance()->MakeUniqueId(), AceType::MakeRefPtr<TextPattern>());
+    EXPECT_FALSE(textNode == nullptr);
+    auto textLayoutProperty = textNode->GetLayoutProperty<TextLayoutProperty>();
+    EXPECT_FALSE(textLayoutProperty == nullptr);
+    textLayoutProperty->UpdateContent(CREATE_VALUE);
+    LayoutConstraintF parentLayoutConstraint;
+    parentLayoutConstraint.selfIdealSize.SetSize(TEXT_SIZE);
+    textLayoutProperty->UpdateLayoutConstraint(parentLayoutConstraint);
+    textLayoutProperty->UpdateContentConstraint();
+    textNode->SetInternal();
+    frameNode->AddChild(textNode);
+    RefPtr<GeometryNode> geometryNode = AceType::MakeRefPtr<GeometryNode>();
+    EXPECT_FALSE(geometryNode == nullptr);
+    LayoutWrapper layoutWrapper = LayoutWrapper(textNode, geometryNode, textLayoutProperty);
+    auto textPattern = textNode->GetPattern<TextPattern>();
+    EXPECT_FALSE(textPattern == nullptr);
+    auto textLayoutAlgorithm = textPattern->CreateLayoutAlgorithm();
+    EXPECT_FALSE(textLayoutAlgorithm == nullptr);
+    layoutWrapper.SetLayoutAlgorithm(
+        AccessibilityManager::MakeRefPtr<LayoutAlgorithmWrapper>(textLayoutAlgorithm));
+    textLayoutAlgorithm->Measure(&layoutWrapper);
+    textLayoutAlgorithm->Layout(&layoutWrapper);
+    EXPECT_EQ(layoutWrapper.GetGeometryNode()->GetFrameSize(), TEXT_SIZE);
+    EXPECT_EQ(layoutWrapper.GetGeometryNode()->GetFrameOffset(), OffsetF());
+}
+
+/**
+ * @tc.name: ButtonLayoutTest003
+ * @tc.desc: Set an item with alignrules with Button and check it.
+ * @tc.type: FUNC
+ */
+HWTEST_F(ButtonLayoutTestNg, ButtonLayoutTest003, TestSize.Level1)
+{
+    ButtonView::CreateWithLabel(CREATE_VALUE);
+    RefPtr<UINode> element = ViewStackProcessor::GetInstance()->Finish(); 
+    auto frameNode = AceType::DynamicCast<FrameNode>(element);
+    EXPECT_FALSE(frameNode == nullptr);
+    auto textNode = FrameNode::CreateFrameNode(
+            TEXT_ETS_TAG, ElementRegister::GetInstance()->MakeUniqueId(), AceType::MakeRefPtr<TextPattern>());
+    EXPECT_FALSE(textNode == nullptr);
+    auto textLayoutProperty = textNode->GetLayoutProperty<TextLayoutProperty>();
+    EXPECT_FALSE(textLayoutProperty == nullptr);
+    textLayoutProperty->UpdateContent(CREATE_VALUE);
+    LayoutConstraintF parentLayoutConstraint;
+    parentLayoutConstraint.selfIdealSize.SetSize(TEXT_SIZE);
+    textLayoutProperty->UpdateLayoutConstraint(parentLayoutConstraint);
+    textLayoutProperty->UpdateContentConstraint();
+    textNode->SetInternal();
+    frameNode->AddChild(textNode);
+    RefPtr<GeometryNode> geometryNode = AceType::MakeRefPtr<GeometryNode>();
+    EXPECT_FALSE(geometryNode == nullptr);
+    LayoutWrapper layoutWrapper = LayoutWrapper(frameNode, geometryNode, frameNode->GetLayoutProperty());
+    auto buttonLayoutProperty = frameNode->GetLayoutProperty<ButtonLayoutProperty>();
+    EXPECT_FALSE(buttonLayoutProperty == nullptr);
+    buttonLayoutProperty->UpdateType(ButtonType::CIRCLE);
+    auto buttonPattern = frameNode->GetPattern<ButtonPattern>();
+    EXPECT_FALSE(buttonPattern == nullptr);
+    auto buttonLayoutAlgorithm = buttonPattern->CreateLayoutAlgorithm();
+    EXPECT_FALSE(buttonLayoutAlgorithm == nullptr);
+    LayoutConstraintF buttonLayoutConstraint;
+    buttonLayoutConstraint.selfIdealSize.SetWidth(BUTTON_ONLY_HAS_WIDTH_VALUE);
+    layoutWrapper.GetLayoutProperty()->UpdateLayoutConstraint(buttonLayoutConstraint);
+    layoutWrapper.GetLayoutProperty()->UpdateContentConstraint();
+    layoutWrapper.SetLayoutAlgorithm(
+        AccessibilityManager::MakeRefPtr<LayoutAlgorithmWrapper>(buttonLayoutAlgorithm));
+    buttonLayoutAlgorithm->Measure(&layoutWrapper);
+    buttonLayoutAlgorithm->Layout(&layoutWrapper);
+    EXPECT_EQ(layoutWrapper.GetGeometryNode()->GetFrameSize(), BUTTON_ONLY_HAS_WIDTH_SIZE);
+    EXPECT_EQ(layoutWrapper.GetGeometryNode()->GetFrameOffset(), OffsetF());
+}
+
+} // namespace OHOS::Ace::NG
\ No newline at end of file
diff --git a/frameworks/core/components_ng/test/pattern/button/BUILD.gn b/frameworks/core/components_ng/test/pattern/button/BUILD.gn
index b8db480f2..8f0bf53be 100644
--- a/frameworks/core/components_ng/test/pattern/button/BUILD.gn
+++ b/frameworks/core/components_ng/test/pattern/button/BUILD.gn
@@ -18,7 +18,7 @@ import(
 
 ohos_unittest("button_pattern_test_ng") {
   module_out_path = "$test_output_path/button"
-
+  platform = "ohos"
   sources = [ "button_pattern_test_ng.cpp" ]
 
   deps = [
@@ -26,10 +26,39 @@ ohos_unittest("button_pattern_test_ng") {
     "$ace_root/frameworks/core/components_ng/base:ace_core_components_base_ng_ohos",
   ]
 
+  if (enable_ng_build) {
+    deps += [
+      "$ace_flutter_engine_root_new:third_party_flutter_engine_dev_ohos",
+      "$ace_flutter_engine_root_new/third_party/skia:ace_skia_dev_ohos",
+    ]
+  } else {
+    deps += [
+      "$ace_flutter_engine_root:third_party_flutter_engine_ohos",
+      "$ace_flutter_engine_root/skia:ace_skia_ohos",
+    ]
+  }
+
   configs = [
     ":config_button_test",
     "$ace_root:ace_config",
   ]
+  include_dirs = [
+    "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
+    "//foundation/graphic/graphic_2d/rosen/modules/2d_engine",
+    "//foundation/graphic/graphic_2d/rosen/modules/2d_engine/rosen_text",
+    "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics/include",
+    "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics/src",
+    "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics/src/drawing/engine_adapter",
+    "//third_party/bounds_checking_function/include",
+  ]
+
+  if (platform == "ohos") {
+    deps += [
+      "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics:2d_graphics",
+    ]
+  } else {
+    deps += [ "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics:2d_graphics_source_$platform" ]
+  }
 }
 
 config("config_button_test") {
diff --git a/frameworks/core/components_ng/test/pattern/button/button_pattern_test_ng.cpp b/frameworks/core/components_ng/test/pattern/button/button_pattern_test_ng.cpp
index dee0be2d5..2c7fbaa09 100644
--- a/frameworks/core/components_ng/test/pattern/button/button_pattern_test_ng.cpp
+++ b/frameworks/core/components_ng/test/pattern/button/button_pattern_test_ng.cpp
@@ -13,29 +13,52 @@
  * limitations under the License.
  */
 
+#include <cstddef>
+#include <optional>
 #include "gtest/gtest.h"
 
+#include "base/geometry/dimension.h"
 #include "base/memory/ace_type.h"
 #include "base/memory/referenced.h"
 #include "core/components/common/layout/constants.h"
+#include "core/components/common/properties/text_style.h"
 #include "core/components_ng/base/view_stack_processor.h"
 #include "core/components_ng/layout/layout_property.h"
 #include "core/components_ng/pattern/button/button_layout_property.h"
 #include "core/components_ng/pattern/button/button_view.h"
+#include "core/components_ng/pattern/text/text_layout_property.h"
+#include "core/components_ng/pattern/text/text_pattern.h"
 
 using namespace testing;
 using namespace testing::ext;
 
 namespace OHOS::Ace::NG {
 namespace {
+
 const std::string CREATE_VALUE = "Hello World";
 const ButtonType BUTTON_TYPE_CAPSULE_VALUE = ButtonType::CAPSULE;
+const ButtonType BUTTON_TYPE_CUSTOM_VALUE = ButtonType::CUSTOM;
+const ButtonType BUTTON_TYPE_DOWNLOAD_VALUE = ButtonType::DOWNLOAD;
+const ButtonType BUTTON_TYPE_CIRCLE_VALUE = ButtonType::CIRCLE;
+const Dimension BUTTON_FONT_SIZE_VALUE = 30.0_vp;
+const Ace::FontWeight BUTTON_BOLD_FONT_WEIGHT_VALUE = Ace::FontWeight::BOLD;
+const Ace::FontStyle BUTTON_ITALIC_FONT_STYLE_VALUE = Ace::FontStyle::ITALIC;
+const Color BUTTON_TEXT_COLOR_VALUE = Color::RED;
+const std::vector<std::string> FONT_FAMILY_VALUE = { "cursive" };
 const bool STATE_EFFECT_TRUE_VALUE = true;
+const char BUTTON_ETS_TAG[] = "Button";
+const char TEXT_ETS_TAG[] = "Text";
+
 } // namespace
 
 struct TestProperty {
     std::optional<ButtonType> typeValue = std::nullopt;
     std::optional<bool> stateEffectValue = std::nullopt;
+    std::optional<Dimension> fontSizeValue = std::nullopt;
+    std::optional<Ace::FontWeight> fontWeightValue = std::nullopt;
+    std::optional<Color> textColorValue = std::nullopt;
+    std::optional<Ace::FontStyle> fontStyleValue = std::nullopt;
+    std::optional<std::vector<std::string>> fontFamilyValue = std::nullopt;
 };
 
 class ButtonPatternTestNg : public testing::Test {
@@ -49,10 +72,27 @@ RefPtr<FrameNode> ButtonPatternTestNg::CreateLabelButtonParagraph(
     const std::string& createValue, const TestProperty& testProperty)
 {
     ButtonView::CreateWithLabel(createValue);
-    if (testProperty.typeValue.has_value())
+    if (testProperty.typeValue.has_value()) {
         ButtonView::SetType(testProperty.typeValue.value());
-    if (testProperty.stateEffectValue.has_value())
+    }
+    if (testProperty.stateEffectValue.has_value()) {
         ButtonView::SetStateEffect(testProperty.stateEffectValue.value());
+    }
+    if (testProperty.fontSizeValue.has_value()) {
+        ButtonView::SetFontSize(testProperty.fontSizeValue.value());
+    }
+    if (testProperty.fontWeightValue.has_value()) {
+        ButtonView::SetFontWeight(testProperty.fontWeightValue.value());
+    }
+    if (testProperty.textColorValue.has_value()) {
+        ButtonView::SetTextColor(testProperty.textColorValue.value());
+    }
+    if (testProperty.fontStyleValue.has_value()) {
+        ButtonView::SetItalicFontStyle(testProperty.fontStyleValue.value());
+    }
+    if (testProperty.fontFamilyValue.has_value()) {
+        ButtonView::SetFontFamily(testProperty.fontFamilyValue.value());
+    }
 
     RefPtr<UINode> element = ViewStackProcessor::GetInstance()->Finish(); // TextView pop
     return AceType::DynamicCast<FrameNode>(element);
@@ -78,4 +118,91 @@ HWTEST_F(ButtonPatternTestNg, ButtonFrameNodeCreator001, TestSize.Level1)
     EXPECT_EQ(buttonLayoutProperty == nullptr, false);
     EXPECT_EQ(buttonLayoutProperty->GetTypeValue(), BUTTON_TYPE_CAPSULE_VALUE);
 }
+
+/**
+ * @tc.name: ButtonFrameNodeCreator002
+ * @tc.desc: Test all the properties of button.
+ * @tc.type: FUNC
+ * @tc.author: shanshurong
+ */
+HWTEST_F(ButtonPatternTestNg, ButtonFrameNodeCreator002, TestSize.Level1)
+{
+    TestProperty testProperty;
+    testProperty.typeValue = std::make_optional(BUTTON_TYPE_CUSTOM_VALUE);
+    ButtonView::Create(BUTTON_ETS_TAG);
+    ButtonView::SetType(testProperty.typeValue.value());
+    RefPtr<UINode> element = ViewStackProcessor::GetInstance()->Finish();
+    auto frameNode = AceType::DynamicCast<FrameNode>(element);
+    EXPECT_EQ(frameNode == nullptr, false);
+    RefPtr<LayoutProperty> layoutProperty = frameNode->GetLayoutProperty();
+    EXPECT_EQ(layoutProperty == nullptr, false);
+    RefPtr<ButtonLayoutProperty> buttonLayoutProperty = AceType::DynamicCast<ButtonLayoutProperty>(layoutProperty);
+    EXPECT_EQ(buttonLayoutProperty == nullptr, false);
+    EXPECT_EQ(buttonLayoutProperty->GetTypeValue(), BUTTON_TYPE_CUSTOM_VALUE);
+}
+
+/**
+ * @tc.name: ButtonFrameNodeCreator003
+ * @tc.desc: Test all the properties of button.
+ * @tc.type: FUNC
+ * @tc.author: shanshurong
+ */
+HWTEST_F(ButtonPatternTestNg, ButtonFrameNodeCreator003, TestSize.Level1)
+{
+    TestProperty testProperty;
+    testProperty.typeValue = std::make_optional(BUTTON_TYPE_DOWNLOAD_VALUE);
+    testProperty.stateEffectValue = std::make_optional(STATE_EFFECT_TRUE_VALUE);
+    testProperty.fontSizeValue = std::make_optional(BUTTON_FONT_SIZE_VALUE);
+    testProperty.fontWeightValue = std::make_optional(BUTTON_BOLD_FONT_WEIGHT_VALUE);
+    RefPtr<FrameNode> frameNode = CreateLabelButtonParagraph(CREATE_VALUE, testProperty);
+    EXPECT_EQ(frameNode == nullptr, false);
+    RefPtr<LayoutProperty> layoutProperty = frameNode->GetLayoutProperty();
+    EXPECT_EQ(layoutProperty == nullptr, false);
+    RefPtr<ButtonLayoutProperty> buttonLayoutProperty = AceType::DynamicCast<ButtonLayoutProperty>(layoutProperty);
+    EXPECT_EQ(buttonLayoutProperty == nullptr, false);
+    EXPECT_EQ(buttonLayoutProperty->GetTypeValue(), BUTTON_TYPE_DOWNLOAD_VALUE);
+    EXPECT_EQ(buttonLayoutProperty->GetStateEffectValue(), STATE_EFFECT_TRUE_VALUE);
+    EXPECT_EQ(buttonLayoutProperty->GetFontSizeValue(), BUTTON_FONT_SIZE_VALUE);
+    EXPECT_EQ(buttonLayoutProperty->GetFontWeightValue(), BUTTON_BOLD_FONT_WEIGHT_VALUE);
+    EXPECT_EQ(buttonLayoutProperty->GetLabelValue(), CREATE_VALUE);
+}
+
+/**
+ * @tc.name: ButtonFrameNodeCreator004
+ * @tc.desc: Test all the properties of button.
+ * @tc.type: FUNC
+ * @tc.author: shanshurong
+ */
+HWTEST_F(ButtonPatternTestNg, ButtonFrameNodeCreator004, TestSize.Level1)
+{
+    TestProperty testProperty;
+    testProperty.typeValue = std::make_optional(BUTTON_TYPE_CIRCLE_VALUE);
+    testProperty.textColorValue = std::make_optional(BUTTON_TEXT_COLOR_VALUE);
+    testProperty.fontStyleValue = std::make_optional(BUTTON_ITALIC_FONT_STYLE_VALUE);
+    testProperty.fontFamilyValue = std::make_optional(FONT_FAMILY_VALUE);
+    auto frameNode = CreateLabelButtonParagraph(CREATE_VALUE, testProperty);
+    EXPECT_EQ(frameNode == nullptr, false);
+    auto textNode = FrameNode::CreateFrameNode(
+        TEXT_ETS_TAG, ElementRegister::GetInstance()->MakeUniqueId(), AceType::MakeRefPtr<TextPattern>());
+    EXPECT_EQ(textNode == nullptr, false);
+    auto textLayoutProperty = textNode->GetLayoutProperty<TextLayoutProperty>();
+    EXPECT_EQ(textLayoutProperty == nullptr, false);
+    textLayoutProperty->UpdateContent(CREATE_VALUE);
+    textNode->SetInternal();
+    frameNode->AddChild(textNode);
+    auto textChild = AceType::DynamicCast<FrameNode>(frameNode->GetChildren().front());
+    EXPECT_EQ(textChild == nullptr, false);
+    auto textLayoutPropertyValue = textChild->GetLayoutProperty<TextLayoutProperty>();
+    EXPECT_EQ(textLayoutProperty == nullptr, false);
+    RefPtr<LayoutProperty> layoutProperty = frameNode->GetLayoutProperty();
+    EXPECT_EQ(layoutProperty == nullptr, false);
+    RefPtr<ButtonLayoutProperty> buttonLayoutProperty = AceType::DynamicCast<ButtonLayoutProperty>(layoutProperty);
+    EXPECT_EQ(buttonLayoutProperty == nullptr, false);
+    EXPECT_EQ(buttonLayoutProperty->GetTypeValue(), BUTTON_TYPE_CIRCLE_VALUE);
+    EXPECT_EQ(buttonLayoutProperty->GetTextColorValue(), BUTTON_TEXT_COLOR_VALUE);
+    EXPECT_EQ(buttonLayoutProperty->GetLabelValue(), CREATE_VALUE);
+    EXPECT_EQ(textLayoutPropertyValue->GetItalicFontStyle().value(), BUTTON_ITALIC_FONT_STYLE_VALUE);
+    EXPECT_EQ(textLayoutPropertyValue->GetFontFamily().value(), FONT_FAMILY_VALUE);
+}
+
 } // namespace OHOS::Ace::NG
