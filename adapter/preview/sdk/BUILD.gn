# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import(
    "//foundation/arkui/ace_engine/adapter/preview/build/config_js_engine.gni")
import("//foundation/arkui/ace_engine/build/ace_lib.gni")
import("//foundation/arkui/ace_engine/interfaces/napi/kits/napi_lib.gni")

if (is_standard_system) {
  system_resource_hap_path =
      get_label_info("//utils/resources/systemres:systemres_hap",
                     "target_out_dir") + "/SystemResources.hap"
  system_resource_path =
      get_label_info("//utils/resources/systemres:systemres_hap",
                     "target_out_dir") + "/resources"
  if (host_os == "mac") {
    resource_manager_library =
        get_label_info(
            "//base/global/resmgr_standard/frameworks/resmgr:global_resmgr_mac",
            "root_out_dir") +
        "/global/resmgr_standard/libglobal_resmgr_mac.dylib"
  } else {
    resource_manager_library =
        get_label_info(
            "//base/global/resmgr_standard/frameworks/resmgr:global_resmgr_win",
            "root_out_dir") + "/global/resmgr_standard/libglobal_resmgr_win.dll"
  }
} else {
  system_resource_hap_path =
      get_label_info("//utils/resources/systemres:systemres_hap",
                     "target_gen_dir") + "/SystemResources.hap"
  system_resource_path =
      get_label_info("//utils/resources/systemres:systemres_hap",
                     "target_gen_dir") + "/resources"
}

action("get_system_resource") {
  script = "get_system_resources.sh"
  deps = [ "//utils/resources/systemres:systemres_hap($current_toolchain)" ]
  args = [
    rebase_path(system_resource_hap_path),
    rebase_path(system_resource_path),
  ]
  inputs = [ system_resource_hap_path ]
  outputs = [ system_resource_path ]
}

# Triggered only when the SDK is compiled
if (is_standard_system) {
  ohos_copy("copy_preview_shared_library") {
    if (use_mac) {
      mac_shared_library_path =
          get_label_info(":libace_engine_mac($mac_buildtool)", "root_out_dir") +
          "/common/common/libace_engine_mac.dylib"
      deps = [
        "$ace_root/adapter/preview/build:libace_engine_mac(${mac_buildtool})",
      ]
      if (enable_glfw_window) {
        deps += [ "$ace_root/adapter/preview/build:ace_for_mac" ]
      }
      sources = [ mac_shared_library_path ]
      outputs =
          [ target_out_dir + "/previewer/common/bin/libace_engine_mac.dylib" ]
      module_source_dir = target_out_dir + "/previewer/common/bin/"
      module_install_name = ""
    } else {
      windows_shared_library_path =
          get_label_info(":libace_engine_windows", "root_out_dir") +
          "/common/common/libace_engine_windows.dll"
      deps = [ "$ace_root/adapter/preview/build:libace_engine_windows" ]
      if (enable_glfw_window) {
        deps += [ "$ace_root/adapter/preview/build:ace_for_windows" ]
      }
      sources = [ windows_shared_library_path ]
      outputs =
          [ target_out_dir + "/previewer/common/bin/libace_engine_windows.dll" ]
      module_source_dir = target_out_dir + "/previewer/common/bin/"
      module_install_name = ""
    }
  }

  ohos_copy("copy_ohos_fonts") {
    sources = [
      "//foundation/arkui/ace_engine/adapter/preview/sdk/fontconfig.json",
      "//utils/resources/fonts",
    ]
    outputs = [ target_out_dir + "/previewer/common/bin/{{source_file_part}}" ]
    module_source_dir = target_out_dir + "/previewer/common/bin/"
    module_install_name = ""
  }

  ohos_copy("copy_napi_shared_library") {
    shared_library_path_napi =
        get_label_info("//foundation/arkui/napi:ace_napi", "root_out_dir")
    shared_library_path_uv =
        get_label_info("//third_party/libuv:uv", "root_out_dir")

    # ark js engine relvant dynamic library
    if (enable_ark_preview) {
      ark_core_shared_library =
          get_label_info("//ark/runtime_core/libpandabase:libarkbase",
                         "root_out_dir") + "/ark/ark"
      ark_js_shared_library =
          get_label_info("//ark/js_runtime:libark_jsruntime", "root_out_dir") +
          "/ark/ark_js_runtime"
      if (use_mingw_win) {
        sources = [
          "$ark_core_shared_library/libarkbase.dll",
          "$ark_core_shared_library/libarkfile.dll",
          "$ark_core_shared_library/libarkziparchive.dll",
          "$ark_js_shared_library/libark_jsruntime.dll",
          "$shared_library_path_napi/arkui/napi/libace_napi.dll",
          "$shared_library_path_napi/arkui/napi/libace_napi_ark.dll",
          "$shared_library_path_uv/arkui/napi/libuv.dll",
          "//third_party/icu/icu4c/source/data/out/tmp/icudt67l.dat",
        ]
        deps = [
          "$ace_napi:ace_napi",
          "$ace_napi:ace_napi_ark",
          "//ark/js_runtime:libark_jsruntime",
          "//ark/runtime_core/libpandabase:libarkbase",
          "//ark/runtime_core/libpandafile:libarkfile",
          "//ark/runtime_core/libziparchive:libarkziparchive",
          "//third_party/libuv:uv",
        ]
      }
    } else {
      deps = [
        "//foundation/arkui/napi:ace_napi",
        "//foundation/arkui/napi:ace_napi_quickjs",
        "//third_party/libuv:uv",
      ]
      if (use_mac) {
        sources = [
          "$shared_library_path_napi/arkui/napi/libace_napi.dylib",
          "$shared_library_path_napi/arkui/napi/libace_napi_quickjs.dylib",
          "$shared_library_path_uv/arkui/napi/libuv.dylib",
        ]
      } else {
        # ark windows compiling check
        deps += [
          "$ace_napi:ace_napi_ark",
          "//ark/js_runtime/ecmascript/js_vm:ark_js_vm",
        ]
        sources = [
          "$shared_library_path_napi/arkui/napi/libace_napi.dll",
          "$shared_library_path_napi/arkui/napi/libace_napi_quickjs.dll",
          "$shared_library_path_uv/arkui/napi/libuv.dll",
        ]
      }
    }
    outputs = [ target_out_dir + "/previewer/common/bin/{{source_file_part}}" ]
    module_source_dir = target_out_dir + "/previewer/common/bin"
    module_install_name = ""
  }

  ohos_copy("copy_napi_modules_shared_library") {
    deps = []
    sources = []
    foreach(module, common_napi_libs) {
      out_path = get_label_info("$ace_root/interfaces/napi/kits:${module}",
                                "root_out_dir")
      deps += [ "$ace_root/interfaces/napi/kits:${module}" ]
      if (use_mac) {
        sources +=
            [ "${out_path}/arkui/ace_engine_standard/lib${module}.dylib" ]
      } else {
        sources += [ "${out_path}/arkui/ace_engine_standard/lib${module}.dll" ]
      }
    }

    outputs =
        [ target_out_dir + "/previewer/common/bin/module/{{source_file_part}}" ]
    module_source_dir = target_out_dir + "/previewer/common/bin/module/"
    module_install_name = ""
  }

  ohos_copy("copy_resource_dynamic_library_standard") {
    if (host_os == "mac") {
      deps = [ "//base/global/resmgr_standard/frameworks/resmgr:global_resmgr_mac(${current_toolchain})" ]
    } else {
      deps = [ "//base/global/resmgr_standard/frameworks/resmgr:global_resmgr_win(${current_toolchain})" ]
    }

    sources = [ resource_manager_library ]

    outputs = [ target_out_dir + "/previewer/common/bin/{{source_file_part}}" ]
    module_source_dir = target_out_dir + "/previewer/common/bin"
    module_install_name = ""
  }

  ohos_copy("copy_system_resource_standard") {
    deps = [ ":get_system_resource" ]

    sources = [ system_resource_path ]

    outputs = [ target_out_dir + "/previewer/common/{{source_file_part}}" ]
    module_source_dir = target_out_dir + "/previewer/common"
    module_install_name = ""
  }

  if (use_mingw_win) {
    ohos_copy("copy_preview_curl_cacert") {
      sources = [ "./cacert.pem" ]
      outputs = [ target_out_dir + "/previewer/resources/cacert.pem" ]
      module_source_dir = target_out_dir + "/previewer/resources"
      module_install_name = ""
    }
  }
} else {
  ohos_copy("copy_system_resource") {
    if (use_mac) {
      sources = [ "//prebuilts/ace-toolkit/preview/rich/resources" ]
      outputs = [ target_out_dir + "/tv_resources/{{source_file_part}}" ]
      module_source_dir = target_out_dir + "/tv_resources/"
      module_install_name = ""
    } else {
      deps = [ ":get_system_resource" ]

      sources = [ system_resource_path ]
      outputs = [ target_out_dir + "/tv_resources/{{source_file_part}}" ]
      module_source_dir = target_out_dir + "/tv_resources/"
      module_install_name = ""
    }
  }

  ohos_copy("copy_system_resource_wearable") {
    if (use_mac) {
      sources = [ "//prebuilts/ace-toolkit/preview/rich/resources" ]
      outputs = [ target_out_dir + "/wearable_resources/{{source_file_part}}" ]
      module_source_dir = target_out_dir + "/wearable_resources/"
      module_install_name = ""
    } else {
      deps = [ ":get_system_resource" ]

      sources = [ system_resource_path ]
      outputs = [ target_out_dir + "/wearable_resources/{{source_file_part}}" ]
      module_source_dir = target_out_dir + "/wearable_resources/"
      module_install_name = ""
    }
  }
}
