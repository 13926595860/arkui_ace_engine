diff --git a/frameworks/bridge/declarative_frontend/engine/jsEnumStyle.js b/frameworks/bridge/declarative_frontend/engine/jsEnumStyle.js
index 8199e2b2883b78ec3b89dd0cc914a0ece8c26d56..09caa292f48935bbf06ad40487a4cb8c983954da 100644
--- a/frameworks/bridge/declarative_frontend/engine/jsEnumStyle.js
+++ b/frameworks/bridge/declarative_frontend/engine/jsEnumStyle.js
@@ -738,6 +738,8 @@ var SlideEffect;
   SlideEffect[SlideEffect["Right"] = 2] = "Right";
   SlideEffect[SlideEffect["Top"] = 3] = "Top";
   SlideEffect[SlideEffect["Bottom"] = 4] = "Bottom";
+  SlideEffect[SlideEffect["Start"] = 5] = "Start";
+  SlideEffect[SlideEffect["End"] = 6] = "End";
 })(SlideEffect || (SlideEffect = {}));
 
 var GradientDirection;
diff --git a/frameworks/bridge/declarative_frontend/jsview/js_page_transition.cpp b/frameworks/bridge/declarative_frontend/jsview/js_page_transition.cpp
index 7f917bc30af9cf1c5d70d528579307171322a301..f1db81730f2ed60b9d8cb9095058c0280d20dc79 100644
--- a/frameworks/bridge/declarative_frontend/jsview/js_page_transition.cpp
+++ b/frameworks/bridge/declarative_frontend/jsview/js_page_transition.cpp
@@ -79,7 +79,8 @@ void JSPageTransition::Slide(const JSCallbackInfo& info)
 {
     if (info.Length() > 0 && info[0]->IsNumber()) {
         auto effect = info[0]->ToNumber<int32_t>();
-        if (effect >= static_cast<int32_t>(SlideEffect::LEFT) && effect <= static_cast<int32_t>(SlideEffect::BOTTOM)) {
+
+        if (effect >= static_cast<int32_t>(SlideEffect::LEFT) && effect <= static_cast<int32_t>(SlideEffect::END)) {
             PageTransitionModel::GetInstance()->SetSlideEffect(static_cast<SlideEffect>(effect));
         }
     }
diff --git a/frameworks/core/animation/page_transition_common.h b/frameworks/core/animation/page_transition_common.h
index 65988c79abef00457897072b6fb3eb36436cef07..284204ec97bf1f3692f60ea525ea5e52639c1843 100644
--- a/frameworks/core/animation/page_transition_common.h
+++ b/frameworks/core/animation/page_transition_common.h
@@ -44,6 +44,8 @@ enum class SlideEffect {
     RIGHT,
     TOP,
     BOTTOM,
+    START,
+    END,
 };
 
 struct PageTransitionOption {
diff --git a/frameworks/core/components_ng/render/adapter/rosen_render_context.cpp b/frameworks/core/components_ng/render/adapter/rosen_render_context.cpp
index e6eb0ebd557b869e08cce4d45dcb8e886fc7d0c2..b85fa1c11f1a3708d23db0d2b634ea7847d053e4 100644
--- a/frameworks/core/components_ng/render/adapter/rosen_render_context.cpp
+++ b/frameworks/core/components_ng/render/adapter/rosen_render_context.cpp
@@ -4377,6 +4377,14 @@ RefPtr<PageTransitionEffect> RosenRenderContext::GetDefaultPageTransition(PageTr
         case PageTransitionType::EXIT_POP:
             initialBackgroundColor = DEFAULT_MASK_COLOR;
             backgroundColor = DEFAULT_MASK_COLOR;
+            if (AceApplicationInfo::GetInstance().IsRightToLeft()) {
+                pageTransitionRectF = RectF(0.0f, -GetStatusBarHeight(), rect.Width() * PARENT_PAGE_OFFSET,
+                    REMOVE_CLIP_SIZE);
+                defaultPageTransitionRectF = RectF(0.0f, -GetStatusBarHeight(), REMOVE_CLIP_SIZE,
+                    REMOVE_CLIP_SIZE);
+                translate.x = Dimension(-rect.Width() * PARENT_PAGE_OFFSET);
+                break;
+            }
             pageTransitionRectF = RectF(rect.Width() * HALF, -GetStatusBarHeight(), rect.Width() * HALF,
                 REMOVE_CLIP_SIZE);
             defaultPageTransitionRectF = RectF(0.0f, -GetStatusBarHeight(), REMOVE_CLIP_SIZE,
@@ -4386,6 +4394,12 @@ RefPtr<PageTransitionEffect> RosenRenderContext::GetDefaultPageTransition(PageTr
         case PageTransitionType::ENTER_POP:
             initialBackgroundColor = MASK_COLOR;
             backgroundColor = DEFAULT_MASK_COLOR;
+            if (AceApplicationInfo::GetInstance().IsRightToLeft()) {
+                pageTransitionRectF = RectF(rect.Width() * HALF, -GetStatusBarHeight(), rect.Width() * HALF,
+                    REMOVE_CLIP_SIZE);
+                translate.x = Dimension(rect.Width() * HALF);
+                break;
+            }
             pageTransitionRectF = RectF(0.0f, -GetStatusBarHeight(), rect.Width() * PARENT_PAGE_OFFSET,
                 REMOVE_CLIP_SIZE);
             translate.x = Dimension(-rect.Width() * PARENT_PAGE_OFFSET);
@@ -4393,6 +4407,12 @@ RefPtr<PageTransitionEffect> RosenRenderContext::GetDefaultPageTransition(PageTr
         case PageTransitionType::EXIT_PUSH:
             initialBackgroundColor = DEFAULT_MASK_COLOR;
             backgroundColor = MASK_COLOR;
+            if (AceApplicationInfo::GetInstance().IsRightToLeft()) {
+                pageTransitionRectF = RectF(rect.Width() * HALF, -GetStatusBarHeight(), rect.Width() * HALF,
+                    REMOVE_CLIP_SIZE);
+                translate.x = Dimension(rect.Width() * HALF);
+                break;
+            }
             pageTransitionRectF = RectF(0.0f, -GetStatusBarHeight(), rect.Width() * PARENT_PAGE_OFFSET,
                 REMOVE_CLIP_SIZE);
             translate.x = Dimension(-rect.Width() * PARENT_PAGE_OFFSET);
@@ -4409,6 +4429,41 @@ RefPtr<PageTransitionEffect> RosenRenderContext::GetDefaultPageTransition(PageTr
     return resultEffect;
 }
 
+void RosenRenderContext::SlideTransitionEffect(const RefPtr<PageTransitionEffect>& transition, RectF& rect,
+    TranslateOptions& translate)
+{
+    switch (transition->GetSlideEffect().value()) {
+        case SlideEffect::LEFT:
+            translate.x = Dimension(-rect.Width());
+            break;
+        case SlideEffect::RIGHT:
+            translate.x = Dimension(rect.Width());
+            break;
+        case SlideEffect::BOTTOM:
+            translate.y = Dimension(rect.Height());
+            break;
+        case SlideEffect::TOP:
+            translate.y = Dimension(-rect.Height());
+            break;
+        case SlideEffect::START:
+            if (AceApplicationInfo::GetInstance().IsRightToLeft()) {
+                translate.x = Dimension(rect.Width());
+                break;
+            }
+            translate.x = Dimension(-rect.Width());
+            break;
+        case SlideEffect::END:
+            if (AceApplicationInfo::GetInstance().IsRightToLeft()) {
+                translate.x = Dimension(-rect.Width());
+                break;
+            }
+            translate.x = Dimension(rect.Width());
+            break;
+        default:
+            break;
+    }
+}
+
 RefPtr<PageTransitionEffect> RosenRenderContext::GetPageTransitionEffect(const RefPtr<PageTransitionEffect>& transition)
 {
     auto resultEffect = AceType::MakeRefPtr<PageTransitionEffect>(
@@ -4421,22 +4476,7 @@ RefPtr<PageTransitionEffect> RosenRenderContext::GetPageTransitionEffect(const R
         REMOVE_CLIP_SIZE);
     // slide and translate, only one can be effective
     if (transition->GetSlideEffect().has_value()) {
-        switch (transition->GetSlideEffect().value()) {
-            case SlideEffect::LEFT:
-                translate.x = Dimension(-rect.Width());
-                break;
-            case SlideEffect::RIGHT:
-                translate.x = Dimension(rect.Width());
-                break;
-            case SlideEffect::BOTTOM:
-                translate.y = Dimension(rect.Height());
-                break;
-            case SlideEffect::TOP:
-                translate.y = Dimension(-rect.Height());
-                break;
-            default:
-                break;
-        }
+        SlideTransitionEffect(transition, rect, translate);
     } else if (transition->GetTranslateEffect().has_value()) {
         const auto& translateOptions = transition->GetTranslateEffect();
         translate.x = Dimension(translateOptions->x.ConvertToPxWithSize(rect.Width()));
diff --git a/frameworks/core/components_ng/render/adapter/rosen_render_context.h b/frameworks/core/components_ng/render/adapter/rosen_render_context.h
index cac46e2220ba62ade005e56a3a214e8a84410084..5015339367ffc8a41be8be124988527f16c28189 100755
--- a/frameworks/core/components_ng/render/adapter/rosen_render_context.h
+++ b/frameworks/core/components_ng/render/adapter/rosen_render_context.h
@@ -480,6 +480,8 @@ private:
     void SetPositionToRSNode();
 
     RefPtr<PageTransitionEffect> GetDefaultPageTransition(PageTransitionType type);
+    void SlideTransitionEffect(const RefPtr<PageTransitionEffect>& transition, RectF& rect,
+        TranslateOptions& translate);
     RefPtr<PageTransitionEffect> GetPageTransitionEffect(const RefPtr<PageTransitionEffect>& transition);
 
     // Convert BorderRadiusProperty to Rosen::Vector4f
